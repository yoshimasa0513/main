# 事前準備
・AWS環境でEC2を立ち上げる
・EC2にSSH接続する
・rootにスイッチする
sudo su -

# Apacheをインストールする。
yum -y install httpd openssl
systemctl enable httpd
systemctl start httpd

# MySQLをインストールする
※MySQLを選択する理由
・AmazonLinuxの場合、MariaDBであればインストールは簡単だが、
　そのまま使用すると、Redmineインストール時にマイグレーションファイルを実行した際にエラーとなるため、利用時にはカスタムが必要。
・今回はRedmine実績のあるMySQLをインストール

## SWAPの作成
※MySQLの立ち上げ時にメモリが足りないと起動できないため、まずはスワップファイルを作成する。

dd if=/dev/zero of=/swapfile bs=1M count=3072
mkswap /swapfile
swapon /swapfile
echo "/swapfile swap swap defaults 0 0" >> /etc/fstab

## インストールコマンド
rpm -ivh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
yum -y install mysql-community-server
systemctl enable mysqld
systemctl start mysqld

## 初期パスワードを確認
cat /var/log/mysqld.log | grep "A temporary password"

## 初期セットアップ用のコマンドを実行→初期パスワードを変更
mysql_secure_installation

Enter password for user root: 初期パスワードを入力
New password: 新パスワードを入力
Re-enter new password: 新パスワードを入力
：

Change the password for root ? ((Press y|Y for Yes, any other key for No) : そのままエンター
Remove anonymous users? (Press y|Y for Yes, any other key for No) : そのままエンター
Disallow root login remotely? (Press y|Y for Yes, any other key for No) : そのままエンター
Remove test database and access to it? (Press y|Y for Yes, any other key for No) : そのままエンター
Reload privilege tables now? (Press y|Y for Yes, any other key for No) : そのままエンター
：
All done!　←これがでたらOK

## rootで接続確認
mysql -u root -p
※MySQLに接続できたら成功

# .rbenvとruby-buildをインストールする。
※Ruby単独でインストールすることも可能だが、
　rbenvを使うとRubyのバージョンを簡単に切り替えることができるようになる。

## コンパイルに必要なモジュールをインストール
yum -y install git gcc openssl-devel mysql-devel

## 次にrbenvをインストール
参考
インストールマニュアル
https://github.com/rbenv/rbenv#basic-github-checkout

git clone https://github.com/rbenv/rbenv.git /var/lib/rbenv
cd /var/lib/rbenv && src/configure && make -C src
・.rbenvのパスを通す

echo 'export RBENV_ROOT=/var/lib/rbenv' >> ~/.bash_profile
echo 'export PATH="$RBENV_ROOT/bin:$PATH"' >> ~/.bash_profile
/var/lib/rbenv/bin/rbenv init
echo 'eval "$(rbenv init -)"' >> ~/.bash_profile

## 設定変更を反映する
source ~/.bash_profile

# ruby-buildのインストール
参考
ruby-buildのインストールマニュアル(
https://github.com/rbenv/ruby-build#installation
As an rbenv pluginのパターンを実施する

mkdir -p "$(rbenv root)"/plugins
git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build

・rbenv-doctorを実行して問題ないことを確認→.rbenvのインストールを完了させる
curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash

# Ruby 2.7をインストールする
・インストール可能なバージョンを確認
rbenv install --list-all | grep 2.7.

・最新バージョンをインストール
※2021/11/14現在

rbenv install 2.7.3　※しばらく待つ。
rbenv global 2.7.3
ruby -v
バージョンが確認できれば、rubyが利用可能なったことが確認できる

# Redmineをインストールする
※基本手順
Redmineのインストールマニュアル
https://www.redmine.org/projects/redmine/wiki/RedmineInstall

## Step 1 - Redmine application
最新のダウンロードURLを公式URLで確認
Redmineのダウンロードページ( https://www.redmine.org/projects/redmine/wiki/Download

・インストール

cd /var/lib
wget https://www.redmine.org/releases/redmine-4.2.1.zip
unzip redmine-4.2.1.zip
mv redmine-4.2.1 redmine
rm -f redmine-4.2.1.zip
Step 2 - Create an empty database and accompanying use
・Redmine用のユーザー、スキーマを作成
mysql -u root -p

※この手順以降で作成したユーザー：redmineがうまく機能しない。
　別途確認が必要

show databases;
CREATE DATABASE redmine CHARACTER SET utf8mb4;
CREATE USER 'redmine'@'localhost' IDENTIFIED BY 'Testtest#_0';
GRANT ALL PRIVILEGES ON redmine.* TO 'redmine'@'localhost';
exit;
mysql -u redmine -p
※自己検証時はこのユーザーでMySQLへの接続ができなかった。

※参考
・MySQLの操作
　ユーザーの確認
　https://www.dbonline.jp/mysql/user/index11.html

　Redmineのローカル環境構築の際、データベースのテーブル等の作成につまづいた時の対処法(mysql)
　https://zenn.dev/gashi/articles/7dd6a061ebae032322b0

## Step 3 - Database connection configuration
・DB接続用の設定ファイルを作成する。
・Redmineのインストールディレクトリ配下>configディレクトリ>database.yml.exampleをコピーして編集する

cd /var/lib/redmine/config
cp database.yml.example database.yml
vi database.yml

# Default setup is given for MySQL 5.7.7 or later.
# Examples for PostgreSQL, SQLite3 and SQL Server can be found at the end.
# Line indentation must be 2 spaces (no tabs).
production:
  adapter: mysql2
  database: redmine
  host: localhost
  username: redmine　←rootからredmineに変更
  password: "redmineユーザーのパスワード"　←redmineユーザーのパスワードを設定
  # Use "utf8" instead of "utfmb4" for MySQL prior to 5.7.7
  encoding: utf8mb4
※スペース2個でインデントしないとYAMLの書式に合わずにエラーになるので注意。

## Step 4 - Dependencies installation

・Redmineに必要なgem(Unicorn含む)をインストールする。

cd /var/lib/redmine
echo 'gem "unicorn"' >> Gemfile.local
gem install bundler
bundle install --without development test
※EC2を一旦停止した場合などは、
　そのまま上記コマンドを打ってもnotfoundとなる場合があるため、
　「rbenv global 2.7.3」を発行する必要がある場合あり。

・ImageMagickのインストール
yum -y install ImageMagick
※ガントチャートをPNGで出力しようとしたときにエラーが起こってしまうので、ついでにImageMagickもインストールしておく。

## Step 5 - Session store secret gene
・セッションCookie用のトークンを作成する。
bundle exec rake generate_secret_token

## Step 6 - Database schema objects creation
・Redmine用のテーブル等を作成する。
RAILS_ENV=production bundle exec rake db:migrate

## Step 7 - Database default data set
・日本語用の初期データを流し込む。
RAILS_ENV=production REDMINE_LANG=ja bundle exec rake redmine:load_default_data

## Step 8 - File system permissions
・アップロードファイル用のディレクトリ等のパーミッションを変更する。

mkdir -p tmp tmp/pdf public/plugin_assets
chown -R apache:apache files log tmp public/plugin_assets
chmod -R 755 files log tmp public/plugin_assets
Step 9 - Test the installation

## テスト起動：WEBrickを利用してRedmineを起動する。
bundle exec rails server webrick -e production

・「http://EC2のErasticIP:3000/」にアクセス
・RedmineのTOPページが見れれば成功
・とりあえず、Redmineが動く状態になったことを確認
・Ctrl + cでWEBrickを終了

## テスト実行時は以下が必要
※AWSでポート3000を許可するインバウンドルールを追加
※接続方法
以下をブラウザに入力
http://[EC2のElasticIP]:3000/

※Redmineログイン時のデフォルトIDとパス
ID　admin
パス　admin
